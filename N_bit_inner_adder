module N_bit_inner_adder #(
    parameter   N = 256)(
    input [N-1:0] a,
    input [N-1:0] b,
    input cin,
    output [N-1:0] sum,
    output cout
    );
    
    localparam  M = 128;
    localparam  m = N/M;
    
    wire    [3*(m-1):0]         mux_c;
    wire    [M-1:0] mux_sum_0[(m-2):0];
    wire    [M-1:0] mux_sum_1[(m-2):0];
    
    // instantiate the first adder, i = 0, for special cin input and sum output.
    CSA_MUX#(M) csa_mux_inst(a[M-1:0], b[M-1:0], cin, sum[M-1:0], mux_c[0]);

    // Group of 32-bit CSA_MUXs adders with carry and sum outputs
    genvar i;
    generate
        for(i=1; i<m; i=i+1) 
        begin
            // instantiate the remaining (m-1)*2 CSA_MUXs           
            CSA_MUX#(M) csa_mux_inst_0( a[M*i +: M], b[M*i +: M], 0, mux_sum_0[i-1], mux_c[(3*i)-2]);
            CSA_MUX#(M) csa_mux_inst_1( a[M*i +: M], b[M*i +: M], 1, mux_sum_1[i-1], mux_c[(3*i)-1]);

            // instantiate sum mux and carry mux
            assign sum[M*i +: M] = (mux_c[3*(i-1)] == 0)? mux_sum_0[i-1] : mux_sum_1[i-1];
            assign mux_c[3*i] = (mux_c[3*(i-1)] == 0)? mux_c[(3*i)-2] : mux_c[(3*i)-1];
        end
    endgenerate
    
    assign cout = mux_c[3*(m-1)];

endmodule